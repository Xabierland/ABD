Laboratorio 6
Xabier Gabi単a - Apartado A - 35.195.82.3
Francisco Gonzalez - Apartado B -

A)
	- Consulta sin optimizar:
	mysql> SELECT d.dept_name as "Departamento", MAX(s.salary) as "Salario" FROM departments as d INNER JOIN dept_emp as de ON d.dept_no = de.dept_no INNER JOIN salaries as s ON de.emp_no = s.emp_no WHERE d.dept_name = "Production" GROUP BY d.dept_name LIMIT 1;
	+--------------+---------+
	| Departamento | Salario |
	+--------------+---------+
	| Production   |  138273 |
	+--------------+---------+
	1 row in set (0.59 sec)
	
	- Metricas de rendimiento de la consulta sin optimizar:
	mysql> SELECT EVENT_ID, TRUNCATE(TIMER_WAIT/1000000000000,6) as Duration, SQL_TEXT FROM performance_schema.events_statements_history_long WHERE SQL_TEXT like '%Production%';
	158 |   0.5866 | SELECT d.dept_name as "Departamento", MAX(s.salary) as "Salario" FROM departments as d INNER JOIN dept_emp as de ON d.dept_no = de.dept_no INNER JOIN salaries as s ON de.emp_no = s.emp_no WHERE d.dept_name = "Production" GROUP BY d.dept_name LIMIT 1
	
	mysql> SELECT event_name AS Stage, TRUNCATE(TIMER_WAIT/1000000000000,6) AS Duration FROM performance_schema.events_stages_history_long WHERE NESTING_EVENT_ID=158;
	+------------------------------------------------+----------+
	| Stage                                          | Duration |
	+------------------------------------------------+----------+
	| stage/sql/starting                             |   0.0001 |
	| stage/sql/Executing hook on transaction begin. |   0.0000 |
	| stage/sql/starting                             |   0.0000 |
	| stage/sql/checking permissions                 |   0.0000 |
	| stage/sql/checking permissions                 |   0.0000 |
	| stage/sql/checking permissions                 |   0.0000 |
	| stage/sql/Opening tables                       |   0.0000 |
	| stage/sql/init                                 |   0.0000 |
	| stage/sql/System lock                          |   0.0000 |
	| stage/sql/optimizing                           |   0.0000 |
	| stage/sql/statistics                           |   0.0190 |
	| stage/sql/preparing                            |   0.0000 |
	| stage/sql/executing                            |   0.5666 |
	| stage/sql/end                                  |   0.0000 |
	| stage/sql/query end                            |   0.0000 |
	| stage/sql/waiting for handler commit           |   0.0000 |
	| stage/sql/closing tables                       |   0.0000 |
	| stage/sql/freeing items                        |   0.0004 |
	| stage/sql/cleaning up                          |   0.0000 |
	+------------------------------------------------+----------+
	19 rows in set (0.01 sec)
	
	mysql> explain analyze SELECT d.dept_name as "Departamento", MAX(s.salary) as "Salario" FROM departments as d INNER JOIN dept_emp as de ON d.dept_no = de.dept_no INNER JOIN salaries as s ON de.emp_no = s.emp_no WHERE d.dept_name = "Production" GROUP BY d.dept_name LIMIT 1;
	-> Limit: 1 row(s)  (cost=306800.80 rows=1) (actual time=628.254..628.254 rows=1 loops=1)
		-> Group aggregate: max(s.salary)  (cost=306800.80 rows=9) (actual time=628.252..628.252 rows=1 loops=1)
			-> Nested loop inner join  (cost=176200.11 rows=1306007) (actual time=0.080..576.497 rows=697158 loops=1)
				-> Covering index lookup on de using dept_no (dept_no='d004')  (cost=13272.37 rows=128052) (actual time=0.060..27.845 rows=73485 loops=1)
				-> Index lookup on s using PRIMARY (emp_no=de.emp_no)  (cost=0.25 rows=10) (actual time=0.005..0.007 rows=9 loops=73485)
					
	- Comandos utilizados para optimizar la consulta:
	mysql> alter table departments add index idx_dept_no (dept_no);				
	mysql> alter table dept_emp add index idx_emp_no (emp_no);					
	mysql> alter table salaries add index idx_emp_no (emp_no);					
	
	- Metricas de rendimiento de la consutla optimizada y comparacion con las metricas de la version sin optimizar (p.e cuantos pasos menos/mas hay, cuanto mas rapido es en %,...).
	mysql> SELECT EVENT_ID, TRUNCATE(TIMER_WAIT/1000000000000,6) as Duration, SQL_TEXT FROM performance_schema.events_statements_history_long WHERE SQL_TEXT like '%Production%';
	364 |   0.5047 | SELECT d.dept_name as "Departamento", MAX(s.salary) as "Salario" FROM departments as d INNER JOIN dept_emp as de ON d.dept_no = de.dept_no INNER JOIN salaries as s ON de.emp_no = s.emp_no WHERE d.dept_name = "Production" GROUP BY d.dept_name LIMIT 1
	
	mysql> SELECT event_name AS Stage, TRUNCATE(TIMER_WAIT/1000000000000,6) AS Duration FROM performance_schema.events_stages_history_long WHERE NESTING_EVENT_ID=364;
	+------------------------------------------------+----------+
	| Stage                                          | Duration |
	+------------------------------------------------+----------+
	| stage/sql/starting                             |   0.0002 |
	| stage/sql/Executing hook on transaction begin. |   0.0000 |
	| stage/sql/starting                             |   0.0000 |
	| stage/sql/checking permissions                 |   0.0000 |
	| stage/sql/checking permissions                 |   0.0000 |
	| stage/sql/checking permissions                 |   0.0000 |
	| stage/sql/Opening tables                       |   0.0000 |
	| stage/sql/init                                 |   0.0000 |
	| stage/sql/System lock                          |   0.0000 |
	| stage/sql/optimizing                           |   0.0000 |
	| stage/sql/statistics                           |   0.0001 |
	| stage/sql/preparing                            |   0.0000 |
	| stage/sql/executing                            |   0.5037 |
	| stage/sql/end                                  |   0.0000 |
	| stage/sql/query end                            |   0.0000 |
	| stage/sql/waiting for handler commit           |   0.0000 |
	| stage/sql/closing tables                       |   0.0000 |
	| stage/sql/freeing items                        |   0.0003 |
	| stage/sql/cleaning up                          |   0.0000 |
	+------------------------------------------------+----------+
	19 rows in set (0.01 sec)
	
	mysql> explain analyze SELECT d.dept_name as "Departamento", MAX(s.salary) as "Salario" FROM departments as d INNER JOIN dept_emp as de ON d.dept_no = de.dept_no INNER JOIN salaries as s ON de.emp_no = s.emp_no WHERE d.dept_name = "Production" GROUP BY d.dept_name LIMIT 1;
	-> Limit: 1 row(s)  (cost=330395.57 rows=1) (actual time=698.625..698.625 rows=1 loops=1)
		-> Group aggregate: max(s.salary)  (cost=330395.57 rows=9) (actual time=698.624..698.624 rows=1 loops=1)
			-> Nested loop inner join  (cost=199794.88 rows=1306007) (actual time=0.096..650.684 rows=697158 loops=1)
				-> Covering index lookup on de using dept_no (dept_no='d004')  (cost=13309.72 rows=128052) (actual time=0.042..28.183 rows=73485 loops=1)
				-> Index lookup on s using PRIMARY (emp_no=de.emp_no)  (cost=0.44 rows=10) (actual time=0.006..0.008 rows=9 loops=73485)
	
	En este caso, podemos ver que los indices no tienen ninguna mejora del rendimiento y que no se usan para acelerar la SELECT al igual que el histograma el cual aunque no lo deje escrito lo he probado y no tiene ninguna mejora, 
	esto lo podemos ver en que el numero de pasos y los propios pasos son los mismos antes y despues de la creacion de los indices

================================================================================================================================================================================================================================================================================

B)
	- Consulta sin optimizar:
	SELECT t.title as "Categoria", e.birth_date as "Fecha de cumplea単os" from titles as t inner join employees as e on t.emp_no=e.emp_no WHERE t.title="Engineer" ORDER BY e.birth_date DESC limit 1;
	+-----------+----------------------+
	| Categoria | Fecha de cumplea単os  |
	+-----------+----------------------+
	| Engineer  | 1965-02-01           |
	+-----------+----------------------+
	1 row in set (0.40 sec)
	
	- Metricas de rendimiento de la consulta sin optimizar:
	mysql> SELECT EVENT_ID, TRUNCATE(TIMER_WAIT/1000000000000,6) as Duration, SQL_TEXT FROM performance_schema.events_statements_history_long WHERE SQL_TEXT like '%Engineer%';
	782 |   0.4020 | SELECT t.title as "Categoria", e.birth_date as "Fecha de cumplea単os" from titles as t inner join employees as e on t.emp_no=e.emp_no WHERE t.title="Engineer" ORDER BY e.birth_date DESC limit 1
	
	mysql> SELECT event_name AS Stage, TRUNCATE(TIMER_WAIT/1000000000000,6) AS Duration FROM performance_schema.events_stages_history_long WHERE NESTING_EVENT_ID=782;
	+------------------------------------------------+----------+
	| Stage                                          | Duration |
	+------------------------------------------------+----------+
	| stage/sql/starting                             |   0.0001 |
	| stage/sql/Executing hook on transaction begin. |   0.0000 |
	| stage/sql/starting                             |   0.0000 |
	| stage/sql/checking permissions                 |   0.0000 |
	| stage/sql/checking permissions                 |   0.0000 |
	| stage/sql/Opening tables                       |   0.0000 |
	| stage/sql/init                                 |   0.0000 |
	| stage/sql/System lock                          |   0.0000 |
	| stage/sql/optimizing                           |   0.0000 |
	| stage/sql/statistics                           |   0.0000 |
	| stage/sql/preparing                            |   0.0000 |
	| stage/sql/Creating tmp table                   |   0.0000 |
	| stage/sql/executing                            |   0.4013 |
	| stage/sql/end                                  |   0.0000 |
	| stage/sql/query end                            |   0.0000 |
	| stage/sql/waiting for handler commit           |   0.0000 |
	| stage/sql/closing tables                       |   0.0000 |
	| stage/sql/freeing items                        |   0.0003 |
	| stage/sql/cleaning up                          |   0.0000 |
	+------------------------------------------------+----------+
	19 rows in set (0.00 sec)
	
	mysql> explain analyze SELECT t.title as "Categoria", e.birth_date as "Fecha de cumplea単os" from titles as t inner join employees as e on t.emp_no=e.emp_no WHERE t.title="Engineer" ORDER BY e.birth_date DESC limit 1;
	-> Limit: 1 row(s)  (actual time=468.386..468.386 rows=1 loops=1)
		-> Sort: e.birth_date DESC, limit input to 1 row(s) per chunk  (actual time=468.385..468.385 rows=1 loops=1)
			-> Stream results  (cost=60024.58 rows=44231) (actual time=0.279..452.617 rows=115003 loops=1)
				-> Nested loop inner join  (cost=60024.58 rows=44231) (actual time=0.183..411.531 rows=115003 loops=1)
					-> Filter: (t.title = 'Engineer')  (cost=44543.80 rows=44231) (actual time=0.131..215.823 rows=115003 loops=1)
						-> Covering index scan on t using PRIMARY  (cost=44543.80 rows=442308) (actual time=0.122..156.126 rows=443308 loops=1)
					-> Single-row index lookup on e using PRIMARY (emp_no=t.emp_no)  (cost=0.25 rows=1) (actual time=0.002..0.002 rows=1 loops=115003)
				
	- Comandos utilizados para optimizar la consulta:
	mysql> alter table titles add index idx_emp_no (emp_no);
	mysql> alter table employees add index idx_emp_no (emp_no);
	mysql> alter table titles add index idx_title (title);
	
	
	- Metricas de rendimiento de la consutla optimizada y comparacion con las metricas de la version sin optimizar (p.e cuantos pasos menos/mas hay, cuanto mas rapido es en %,...).
	mysql> SELECT t.title as "Categoria", e.birth_date as "Fecha de cumplea単os" from titles as t inner join employees as e on t.emp_no=e.emp_no WHERE t.title="Engineer" ORDER BY e.birth_date DESC limit 1;
	+-----------+----------------------+
	| Categoria | Fecha de cumplea単os  |
	+-----------+----------------------+
	| Engineer  | 1965-02-01           |
	+-----------+----------------------+
	1 row in set (0.19 sec)
	
	mysql> SELECT EVENT_ID, TRUNCATE(TIMER_WAIT/1000000000000,6) as Duration, SQL_TEXT FROM performance_schema.events_statements_history_long WHERE SQL_TEXT like '%Engineer%';
	1023 |   0.1841 | SELECT t.title as "Categoria", e.birth_date as "Fecha de cumplea単os" from titles as t inner join employees as e on t.emp_no=e.emp_no WHERE t.title="Engineer" ORDER BY e.birth_date DESC limit 1
	
	mysql> SELECT event_name AS Stage, TRUNCATE(TIMER_WAIT/1000000000000,6) AS Duration FROM performance_schema.events_stages_history_long WHERE NESTING_EVENT_ID=1023;
	+------------------------------------------------+----------+
	| Stage                                          | Duration |
	+------------------------------------------------+----------+
	| stage/sql/starting                             |   0.0002 |
	| stage/sql/Executing hook on transaction begin. |   0.0000 |
	| stage/sql/starting                             |   0.0000 |
	| stage/sql/checking permissions                 |   0.0000 |
	| stage/sql/checking permissions                 |   0.0000 |
	| stage/sql/Opening tables                       |   0.0001 |
	| stage/sql/init                                 |   0.0000 |
	| stage/sql/System lock                          |   0.0000 |
	| stage/sql/optimizing                           |   0.0000 |
	| stage/sql/statistics                           |   0.0003 |
	| stage/sql/preparing                            |   0.0000 |
	| stage/sql/executing                            |   0.1819 |
	| stage/sql/end                                  |   0.0000 |
	| stage/sql/query end                            |   0.0000 |
	| stage/sql/waiting for handler commit           |   0.0009 |
	| stage/sql/closing tables                       |   0.0000 |
	| stage/sql/freeing items                        |   0.0003 |
	| stage/sql/cleaning up                          |   0.0000 |
	+------------------------------------------------+----------+
	18 rows in set (0.01 sec)
	
	mysql> explain analyze SELECT t.title as "Categoria", e.birth_date as "Fecha de cumplea単os" from titles as t inner join employees as e on t.emp_no=e.emp_no WHERE t.title="Engineer" ORDER BY e.birth_date DESC limit 1;
	-> Limit: 1 row(s)  (cost=131643.50 rows=1) (actual time=213.049..213.050 rows=1 loops=1)
		-> Nested loop inner join  (cost=131643.50 rows=292025) (actual time=213.047..213.047 rows=1 loops=1)
			-> Sort: e.birth_date DESC  (cost=29434.75 rows=292025) (actual time=212.972..212.972 rows=1 loops=1)
				-> Table scan on e  (cost=29434.75 rows=292025) (actual time=0.049..75.697 rows=300024 loops=1)
			-> Covering index lookup on t using PRIMARY (emp_no=e.emp_no, title='Engineer')  (cost=0.25 rows=1) (actual time=0.070..0.070 rows=1 loops=1)
			
	En este caso si vemos una mejora significativa a diferencia del apartado A. El tiempo de ejecucion ha pasado de 0.4020 a 0.1841 lo que supone una mejora de 54.73% lo cual supera el 30% de lo que se nos pedia.